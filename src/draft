import { Component, OnInit, Input } from '@angular/core';
import {FormControl} from '@angular/forms';
import {ComposantComponent} from '../../app/composant/composant.component';
import{SharedDataComposantService} from '../../services/shared-data-composant.service';
import { element } from 'protractor';
import { FirebaseService } from '../../services/firebase.service';
import {ServiceComposantService} from '../../services/service-composant.service';
import { Router, ActivatedRouteSnapshot, ActivatedRoute } from '@angular/router';
import {MatDialog, MatDialogRef, MAT_DIALOG_DATA} from '@angular/material';
import { NewPotagerComponent } from '../new-potager/new-potager.component';

@Component({
  selector: 'app-dashboard',
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.scss']
})
export class DashboardComponent implements OnInit {
 
 
  //cmp: ComposantComponent ; 
  
  msg : string = "bonjour chaima";
  composant :  Array<any> = [];
  diffTime : any ;
  etatUrgent: Array<any> = [] ;
  etatNormal: Array<any> =[] ;
  etatAvertissement: Array <any> = [] ;

  dateNow: any =  new Date().getTime() ;
  //dateNowISO = this.dateNow.toISOString();
  deadline: any ;
  dateNumber: number;
  days : number ;
  time: number;
  seconds: number;
  minutes: number ;
  hours: number;
  hoursDiff: number;
  minuteDiff: number ;

 
  constructor(public serviceCmp : ComposantComponent,
    public firebaseService: FirebaseService,
    public composantService: ServiceComposantService,
    public route: ActivatedRoute,  
    private router: Router,
    public dialog: MatDialog ) { }

    ngOnInit() {

      //this.dateNumber = Date.parse(this.dateNowISO);
     
      this.days= Math.floor(this.dateNumber / (1000 * 60 * 60 * 24));
      
      this.hours = Math.floor((this.dateNumber / (1000 * 60 * 60)) % 24); 
      this.minutes = Math.floor((this.dateNumber / 1000 / 60) % 60);
      this.seconds = Math.floor((this.dateNumber / 1000) % 60);
  
    // console.log('date:' + this.dateNow + '/'+ this.dateNow + '/' );
      this.controlerComposant();
    //console.log(this.dateNow.getMonth()+1 +" "+'/'+ (this.dateNow.getDate()) + '/' + this.dateNow.getFullYear())
      
  
    }
  
    controlerComposant(){
  
       this.composantService.getCapteur().subscribe(data =>{
       //console.log('data:' + data);
         data.forEach(element =>{
       //console.log('element:' + element.payload.doc.data().libelle);
       
          this.composantService.getValCapteur(element.id).subscribe(val =>{
            val.forEach(dataVal =>{
              //console.log('time: ' ) ;
             // console.log('time composant:' +dataVal.payload.doc.data().time); 
           // console.log('time: ' +((this.dateNow.getHours()+1) - dataVal.payload.doc.data().time))
            this.deadline = new Date( dataVal.payload.doc.data().date + " "+  dataVal.payload.doc.data().time).getTime();
            this.diffTime = this.dateNow - this.deadline
            this.hoursDiff = Math.floor((this.diffTime / (1000 * 60 * 60)) % 24);
            this.minuteDiff = Math.floor((this.diffTime / 1000 / 60) % 60);
           console.log('time:'+ dataVal.payload.doc.data().time +" "+ this.hoursDiff +":" + this.minuteDiff +" "+ dataVal.payload.doc.data().date + " "+  dataVal.payload.doc.data().time);
           // data = [element.payload.doc.data().localisation]
            
           
            if((this.hoursDiff +":" + this.minuteDiff) >=  element.data().timeMin){
  
              this.composantService.getComposantPotager(element.id).subscribe(res =>{
                res.forEach(resComposant => {
                  //resComposant.payload.doc.data().potager
                  this.firebaseService.getPotagerwithID(resComposant.payload.doc.data().potager).subscribe(resPotager =>{
                   console.log('avertissement:'+resPotager.data().name + " "+ dataVal.payload.doc.data().time + this.hoursDiff +":" + this.minuteDiff+ " "+element.data().timeMin);
                   this.firebaseService.getUser(resPotager.data().user).subscribe(resUser =>{
                  return  this.composant = [{
                      lib : element.data().libelle,
                      namePotager: resPotager.data().name,
                      nameUser: resUser.payload.data().name,
                      etat: 'avertissement',
                      diff: this.hoursDiff +":" + this.minuteDiff,
                    }];
                   })
                  })
                })
              })
  
            // return this.etatAvertissement.push(this.composant)
  
            }
            if((this.hoursDiff +":" + this.minuteDiff) >= element.data().timeMax){
              this.composantService.getComposantPotager(element.id).subscribe(res =>{
                res.forEach(resComposant => {
                  //resComposant.payload.doc.data().potager
                  this.firebaseService.getPotagerwithID(resComposant.payload.doc.data().potager).subscribe(resPotager =>{
                   console.log('urgent:'+resPotager.data().name + " "+ dataVal.payload.doc.data().time + this.hoursDiff +":" + this.minuteDiff);
                   this.firebaseService.getUser(resPotager.data().user).subscribe(resUser =>{
                   return  this.composant = [{
                       lib : element.data().libelle,
                       namePotager: resPotager.data().name,
                       nameUser: resUser.payload.data().name,
                       etat : 'urgent',
                       diff: this.hoursDiff +":" + this.minuteDiff,
                     }];
                     this.etatUrgent.push(this.composant);
                   })
                  })
                })
              })
             
              // console.log("resArray: "+this.composant);
              //  return this.etatUrgent.push(this.composant);
  
  
             // console.log('diffTime: '+ this.hoursDiff+ ': '+ this.minuteDiff + ' '+ this.dateNow +" "+ this.deadline + element.payload.doc.data().timeMax);
            }
  
            if((this.hoursDiff +":" + this.minuteDiff) <  element.data().timeMin){
  
              this.composantService.getComposantPotager(element.id).subscribe(res =>{
                res.forEach(resComposant => {
                  //resComposant.payload.doc.data().potager
                  this.firebaseService.getPotagerwithID(resComposant.payload.doc.data().potager).subscribe(resPotager =>{
                   console.log('normal:'+resPotager.data().name + " "+ dataVal.payload.doc.data().time + this.hoursDiff +":" + this.minuteDiff);
                   this.firebaseService.getUser(resPotager.data().user).subscribe(resUser =>{
                    console.log(this.deadline + element.data().timeMax);
                   return this.composant = [{
                      lib : element.data().libelle,
                      namePotager: resPotager.data().name,
                      nameUser: resUser.payload.data().name,
                      etat: 'normal',
                      diff: this.hoursDiff +":" + this.minuteDiff,
                    }];
                    
                   })
                  })
                })
              })
  
              //return this.etatNormal.push(this.composant);
  
            }
  
            })
          })
        })
      })
    }
  
  }
  /****************************

  



<div class="main-panel">
 
<div class="sidebar" data-color="green" data-background-color="white" data-image="../assets/img/sidebar-1.jpg">
  <!--
    Tip 1: You can change the color of the sidebar using: data-color="purple | azure | green | orange | danger"

    Tip 2: you can also add an image using data-image tag
-->
  <div class="logo">
    <a routerLink = "/dashboard"class="simple-text logo-normal">
     Smart Potager
    </a>
  </div>
  <div class="sidebar-wrapper">
    <ul class="nav">
      <li class="nav-item active  ">
        <a class="nav-link" routerLink = "/dashboard">
          <i class="material-icons">dashboard</i>
          <p>Dashboard</p>
        </a>
      </li>
      <li class="nav-item  " >
        <a class="nav-link"   routerLink = "/home">
          <i class="material-icons">content_paste</i>
          <p>Liste Utilisateurs</p>
        </a>
      </li>
    
      <li class="nav-item  " >
        <a class="nav-link"   routerLink = "/">
          <i class="material-icons">post_add</i>
          <p>Intervention</p>
        </a>
      </li>
    </ul>
  </div>
</div>
</div>

<!-- scrall card -->
<!-- *ngFor="let item of composant" -->
<div class="main-panel" >
    <div class="content">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
              <li class="breadcrumb-item active " aria-current="page" >
                  
                  <a class="nav-link" routerLink = "/dashboard" >
                    <p>/ Dashboard</p>
                  </a>
              </li>
            </ol>
          </nav>
        <div class="container-fluid" >
           
            <div id="myCarousel" class="carousel slide" data-ride="carousel" >
              <div class="carousel-inner row w-100 mx-auto" >
               
                <div class="carousel-item col-md-4 active" *ngFor="let iCmp of alertCmp ; index as i">
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="card card-chart" >
                              <div class="card-header card-header-danger">
                                <div class="ct-chart" id="dailySalesChart"></div>
                              </div>
                              <div class="card-body" >
                                <h4 class="card-title">{{iCmp.data().libelle}}</h4>
                                <p class="card-category">
                                    Potager <span *ngFor="let iPtg of itemPtgAlert ">"{{iPtg.data().name}}"</span> est en panne
                              </div>
                              <div class="card-footer">
                                <div class="stats">
                                  <i class="material-icons">access_time</i> <span style="float:left;">depuis {{alertDiff[i]}} Heur(s) </span>
                                  <a routerLink="/composant/{{iCmp.id}}" style="position: relative ; left: 50%;float:right; color:silver; font-size: 10px;"><i class="material-icons">read_more</i></a>
                                </div>
                              </div>
                            </div>
                          </div>
                  </div>
                </div>
                <div class="carousel-item col-md-4 " *ngFor="let iCmp of itemCmp ; index as i" >
                    <!-- <span *ngFor="let iDiff of itemDiff"></span> -->
                    <div class="row">
                        <div class="col-sm-12" >
                            <div class="card card-chart" >
                              <div class="card-header card-header-warning">
                                <div class="ct-chart" id="dailySalesChart"></div>
                              </div>
                              <div class="card-body" >
                                <h4 class="card-title">{{iCmp.data().libelle}}</h4>
                                <p class="card-category">
                                    Potager <span *ngFor="let iPtg of itemPtg ">"{{iPtg.data().name}}"</span> est en panne
                              </div>
                              <div class="card-footer">
                                <div class="stats">
                                  <i class="material-icons">access_time</i> <span style="float:left;">depuis {{itemDiff[i]}} Heur(s) </span>
                                  <a routerLink="/composant/{{iCmp.id}}" style="position: relative ; left: 50%;float:right; color:silver; font-size: 10px;"><i class="material-icons">read_more</i></a>
                                </div>
                              </div>
                            </div>
                          </div>
                      </div>
                </div>
                
               
              </div>
              <a class="carousel-control-prev" href="#myCarousel" role="button" data-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="sr-only">Previous</span>
              </a>
              <a class="carousel-control-next" href="#myCarousel" role="button" data-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="sr-only">Next</span>
              </a>
            </div>
          </div>
    
    
    
    
      <div class="row">
       
        
      </div>
      
    </div>

    <div *ngFor="let item of composant" class="list-group-item list-group-item-action flex-column align-items-start">
      <div class="row">
       
        <div class="col col-md-2 text-col">
          <h5 class="mb-1">{{item.lib}}</h5>
        </div>
        <div class="col col-md-1 text-col">
            <h5 class="mb-1"> {{item.namePotager}}</h5>
          </div>
          <div class="col col-md-2 text-col">
              <h5 class="mb-1"> {{item.nameUser}}</h5>
            </div>
            <div class="col col-md-1 text-col">
                <h5 class="mb-1">{{item.etat}}</h5>
              </div>
              <div class="col col-md-1 text-col">
                <h5 class="mb-1">{{item.diff}}</h5>
              </div>
        
    
        
        
         
       
      </div>
    
    </div>
    
  
   

  </div>
  